<style>
.dashboard-welcome {
  margin-bottom: 2rem;
}

.dashboard-welcome h1 {
  font-size: 1.875rem;
  font-weight: 700;
  margin: 0 0 0.5rem 0;
  letter-spacing: -0.025em;
}

.dashboard-welcome p {
  font-size: 0.875rem;
  color: hsl(var(--muted-foreground));
  margin: 0;
}

.chart-container {
  position: relative;
  height: 400px;
  width: 100%;
}

@media (max-width: 1024px) {
  .chart-container {
    height: 350px;
  }
}

@media (max-width: 768px) {
  .dashboard-welcome h1 {
    font-size: 1.5rem;
  }
  
  .chart-container {
    height: 300px;
  }
  
  .info-box {
    padding: 1rem;
  }
  
  .info-box-title {
    font-size: 0.875rem;
  }
}

@media (max-width: 390px) {
  .dashboard-welcome {
    margin-bottom: 1.5rem;
  }
  
  .dashboard-welcome h1 {
    font-size: 1.375rem;
  }
  
  .dashboard-welcome p {
    font-size: 0.8125rem;
  }
  
  .chart-container {
    height: 250px;
  }
  
  .info-box {
    padding: 0.875rem;
  }
  
  .info-box p {
    font-size: 0.8125rem;
  }
}

@media (hover: none) and (pointer: coarse) {
  .chart-container {
    touch-action: pan-y;
  }
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Interface compacte des prédictions des bots */
.bots-compact-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 16px;
  margin-top: 16px;
}

.bot-compact-card {
  background: var(--card-background);
  border: 1px solid var(--border-color);
  border-radius: 12px;
  padding: 16px;
  transition: all 0.2s ease;
}

.bot-compact-card:hover {
  border-color: var(--color-accent);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.bot-compact-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
  padding-bottom: 8px;
  border-bottom: 1px solid var(--border-color);
}

.bot-compact-header h3 {
  margin: 0;
  font-size: 1.1rem;
  font-weight: 600;
  color: var(--text-primary);
}

.bot-compact-stats {
  display: flex;
  gap: 8px;
}

.bot-stat {
  font-size: 0.75rem;
  padding: 4px 8px;
  border-radius: 6px;
  background: var(--background-secondary);
  color: var(--text-secondary);
  font-weight: 500;
}

.bot-stat.success {
  background: rgba(16, 185, 129, 0.2);
  color: #10b981;
}

.bot-compact-content {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.predictions-compact h4,
.patterns-compact h4 {
  margin: 0 0 8px 0;
  font-size: 0.875rem;
  font-weight: 600;
  color: var(--text-primary);
}

.predictions-mini {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.pred-mini {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 6px 8px;
  background: var(--background-secondary);
  border-radius: 6px;
}

.pred-time {
  font-size: 0.75rem;
  font-weight: 600;
  color: var(--text-primary);
  min-width: 30px;
}

.pred-bar-mini {
  flex: 1;
  height: 4px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 2px;
  overflow: hidden;
}

.pred-fill-mini {
  height: 100%;
  background: linear-gradient(90deg, #ef4444 0%, #f59e0b 50%, #10b981 100%);
  border-radius: 2px;
  transition: width 0.3s ease;
}

.pred-percent {
  font-size: 0.75rem;
  font-weight: 600;
  color: var(--text-secondary);
  min-width: 35px;
  text-align: right;
}

.no-predictions-mini {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 8px;
  color: var(--text-muted);
  font-size: 0.75rem;
  font-style: italic;
  background: var(--background-secondary);
  border-radius: 6px;
}

.patterns-mini {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.pattern-mini {
  display: flex;
  align-items: center;
  gap: 6px;
  flex-wrap: wrap;
}

.pattern-label {
  font-size: 0.75rem;
  font-weight: 600;
  color: var(--text-secondary);
  min-width: 50px;
}

.pattern-tag {
  font-size: 0.7rem;
  padding: 2px 6px;
  background: rgba(59, 130, 246, 0.2);
  color: #3b82f6;
  border-radius: 4px;
  font-weight: 500;
}

.no-bots-today {
  text-align: center;
  padding: 40px 20px;
  color: var(--text-muted);
}

.no-bots-icon {
  font-size: 3rem;
  margin-bottom: 16px;
  opacity: 0.5;
}

.no-bots-today h3 {
  margin: 0 0 8px 0;
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--text-primary);
}

.no-bots-today p {
  margin: 0;
  font-size: 0.875rem;
  line-height: 1.5;
}

@media (max-width: 768px) {
  .bots-compact-grid {
    grid-template-columns: 1fr;
    gap: 12px;
  }
  
  .bot-compact-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
  }
  
  .bot-compact-stats {
    align-self: flex-end;
  }
}

@media (max-width: 480px) {
  .bot-compact-card {
    padding: 12px;
  }
  
  .pred-mini {
    padding: 4px 6px;
  }
  
  .pattern-mini {
    flex-direction: column;
    align-items: flex-start;
    gap: 4px;
  }
}
</style>

<%= render 'admin/shared/sidebar' %>

<div class="main-content">
  <%= render 'admin/shared/navbar' %>
  
  <div class="container">
    <%= render 'admin/shared/campaign_banner' %>
    
    <div class="dashboard-welcome">
      <h1>Bienvenue, <%= @client.first_name || @client.email.split('@').first %></h1>
      <p>Voici un aperçu de vos performances de trading</p>
    </div>
    
    <!-- Filtres Dashboard -->
    <div class="card" style="margin-bottom: 1.5rem;">
      <div class="card-header">
        <h3>
          <%= stat_icon(:filter, size: 'md') %>
          Filtres du Dashboard
        </h3>
      </div>
      
      <%= form_with url: admin_dashboard_path, method: :get, local: true, class: "filters-form" do |form| %>
        <div class="filters-grid">
          <div class="filter-group">
            <%= form.label :period, "Période", class: "filter-label" %>
            <%= form.select :period, options_for_select([
              ["7 derniers jours", "7_days"],
              ["30 derniers jours", "30_days"],
              ["3 derniers mois", "3_months"],
              ["6 derniers mois", "6_months"],
              ["1 an", "1_year"],
              ["Tout", "all"]
            ], params[:period] || "30_days"), {}, { class: "filter-select" } %>
          </div>
          
          <div class="filter-group">
            <%= form.label :bot_filter, "Bot", class: "filter-label" %>
            <%= form.select :bot_filter, options_for_select([
              ["Tous les bots", ""]
            ] + (@client.bot_purchases.includes(:trading_bot).map { |bp| 
              ["#{bp.trading_bot.name} (#{bp.magic_number})", bp.magic_number] 
            }), params[:bot_filter]), {}, { class: "filter-select" } %>
          </div>
          
          <div class="filter-group">
            <%= form.label :data_type, "Type de données", class: "filter-label" %>
            <%= form.select :data_type, options_for_select([
              ["Toutes les données", "all"],
              ["Profits seulement", "profits"],
              ["Trades seulement", "trades"],
              ["Statistiques seulement", "stats"]
            ], params[:data_type] || "all"), {}, { class: "filter-select" } %>
          </div>
          
          <div class="filter-group">
            <%= form.label :chart_type, "Type de graphique", class: "filter-label" %>
            <%= form.select :chart_type, options_for_select([
              ["Graphique combiné", "combined"],
              ["Graphique séparé", "separate"],
              ["Graphique simple", "simple"]
            ], params[:chart_type] || "combined"), {}, { class: "filter-select" } %>
          </div>
        </div>
        
        <div style="display: flex; gap: 12px; margin-top: 16px;">
          <%= form.submit "Appliquer les filtres", class: "btn btn-primary" %>
          <%= link_to "Réinitialiser", admin_dashboard_path, class: "btn btn-outline" %>
        </div>
      <% end %>
    </div>
    
    <div class="info-grid" style="margin-bottom: 1.5rem;">
      <div class="info-item">
        <div class="info-label">
          <%= stat_icon(:balance, size: 'sm') %>
          Balance Totale
        </div>
        <div class="info-value">
          <%= number_to_currency(@client.mt5_accounts.sum(:balance), unit: "€", format: "%n %u") %>
        </div>
      </div>
      
      <div class="info-item">
        <div class="info-label">
          <%= profit_icon(@client.total_profits) %>
          Gains Totaux
        </div>
        <div class="info-value <%= @client.total_profits > 0 ? 'positive' : 'negative' %>">
          <%= number_to_currency(@client.total_profits, unit: "€", format: "%n %u") %>
        </div>
      </div>
      
      <div class="info-item">
        <div class="info-label">
          <%= stat_icon(:commission, size: 'sm') %>
          Commission Due
        </div>
        <div class="info-value">
          <%= number_to_currency(@client.total_commission_due, unit: "€", format: "%n %u") %>
        </div>
      </div>
      
      <div class="info-item">
        <div class="info-label">
          <%= stat_icon(:balance, size: 'sm', color: @client.balance_due > 0 ? 'danger' : 'success') %>
          Solde à Payer
        </div>
        <div class="info-value <%= @client.balance_due > 0 ? 'negative' : 'positive' %>">
          <%= number_to_currency(@client.balance_due, unit: "€", format: "%n %u") %>
        </div>
      </div>
    </div>
    
    <!-- Section Prédictions des Bots -->
    <% if @bot_predictions&.any? %>
      <div class="card">
        <div class="card-header">
          <h2>
            <%= nav_icon(:my_bots, size: 'lg') %>
            Prédictions de Mes Bots - Aujourd'hui
          </h2>
          <span class="badge badge-info">
            <%= stat_icon(:projection, size: 'sm') %>
            Prédictions pour le jour J
          </span>
        </div>
        
        <% bots_with_predictions = @bot_predictions.select { |prediction| prediction[:predictions]&.select { |pred| pred[:date] == Date.current }&.any? } %>
        <% if bots_with_predictions.any? %>
          <div class="bots-compact-grid">
            <% bots_with_predictions.each do |prediction| %>
              <% today_predictions = prediction[:predictions]&.select { |pred| pred[:date] == Date.current } || [] %>
              <div class="bot-compact-card">
                <div class="bot-compact-header">
                  <h3><%= prediction[:bot][:name] %></h3>
                  <div class="bot-compact-stats">
                    <span class="bot-stat"><%= prediction[:total_trades] %> trades</span>
                    <span class="bot-stat success"><%= prediction[:success_rate] %>%</span>
                  </div>
                </div>
                
                <div class="bot-compact-content">
                  <!-- Prédictions -->
                  <div class="predictions-compact">
                    <h4>📅 Prédictions Aujourd'hui</h4>
                    <% if today_predictions.any? %>
                      <div class="predictions-mini">
                        <% today_predictions.each do |pred| %>
                          <div class="pred-mini">
                            <span class="pred-time"><%= pred[:hour] %>h</span>
                            <div class="pred-bar-mini">
                              <div class="pred-fill-mini" style="width: <%= (pred[:probability] * 100).round %>%"></div>
                            </div>
                            <span class="pred-percent"><%= (pred[:probability] * 100).round %>%</span>
                          </div>
                        <% end %>
                      </div>
                    <% else %>
                      <div class="no-predictions-mini">
                        <i class="fa-icon fa-md fa-clock"></i>
                        <span>Aucune prédiction pour aujourd'hui</span>
                      </div>
                    <% end %>
                  </div>
                  
                  <!-- Patterns -->
                  <div class="patterns-compact">
                    <h4>📊 Patterns</h4>
                    <div class="patterns-mini">
                      <div class="pattern-mini">
                        <span class="pattern-label">Heures:</span>
                        <% (prediction[:trading_hours] || []).first(3).each do |hour| %>
                          <span class="pattern-tag"><%= hour[:hour] %>h</span>
                        <% end %>
                      </div>
                      <div class="pattern-mini">
                        <span class="pattern-label">Jours:</span>
                        <% (prediction[:trading_days] || []).each do |day| %>
                          <span class="pattern-tag"><%= day[:day_name] %></span>
                        <% end %>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            <% end %>
          </div>
        <% else %>
          <div class="no-bots-today">
            <div class="no-bots-icon">
              <i class="fa-icon fa-lg fa-robot"></i>
            </div>
            <h3>Aucun bot actif aujourd'hui</h3>
            <p>Vos bots n'ont pas de prédictions pour aujourd'hui. Ils se déclencheront peut-être demain !</p>
          </div>
        <% end %>
      </div>
    <% end %>
    
    <!-- Graphique des Performances des Bots -->
    <div class="card">
      <div class="card-header">
        <h2>
          <%= stat_icon(:performance, size: 'lg') %>
          Performances des Bots
        </h2>
        <p>
          <%= stat_icon(:analysis, size: 'sm') %>
          Analyse des performances de tous vos bots
        </p>
      </div>
      
      <div class="chart-container" style="height: 400px;">
        <div id="bots-chart-loading" style="display: flex; align-items: center; justify-content: center; height: 100%; color: var(--text-muted);">
          <div style="text-align: center;">
            <div style="width: 40px; height: 40px; border: 3px solid var(--border-color); border-top: 3px solid var(--color-accent); border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 16px;"></div>
            <p style="margin: 0;">Chargement du graphique des bots...</p>
          </div>
        </div>
        <canvas id="botsChart" style="display: none;"></canvas>
      </div>
    </div>
    
    <!-- Profits Mensuels & Projection -->
    <div class="card">
      <h2>
        <%= stat_icon(:monthly, size: 'lg') %>
        Profits Mensuels & Projection
      </h2>
      
      <div class="two-col" style="margin-bottom: 24px;">
        <div class="info-box info-box-info">
          <div class="info-box-title">
            <%= stat_icon(:performance, size: 'md') %>
            Performance Historique
          </div>
          <p style="margin: 0;">Vos profits réels des 12 derniers mois</p>
        </div>
        <div class="info-box info-box-success">
          <div class="info-box-title">
            <%= stat_icon(:projection, size: 'md') %>
            Projection (6 mois)
          </div>
          <p style="margin: 0;">Basée sur votre moyenne mensuelle: <strong><%= number_to_currency((@projection_data&.last&.dig(:balance) || 0 - current_user.mt5_accounts.sum(:balance)) / 6, unit: "€", format: "%n %u") %>/mois</strong></p>
        </div>
      </div>
      
      <div class="chart-container">
        <div id="chart-loading" style="display: flex; align-items: center; justify-content: center; height: 100%; color: var(--text-muted);">
          <div style="text-align: center;">
            <div style="width: 40px; height: 40px; border: 3px solid var(--border-color); border-top: 3px solid var(--color-accent); border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 16px;"></div>
            <p style="margin: 0;">Chargement du graphique...</p>
          </div>
        </div>
        <canvas id="portfolioChart" style="display: none;"></canvas>
      </div>
    </div>
    
    <!-- Comptes MT5 et Activité Récente -->
    <div class="two-col">
      <div class="card">
        <h2>
          <%= stat_icon(:accounts, size: 'lg') %>
          Comptes MT5
        </h2>
        <% if @mt5_accounts&.any? %>
          <table>
            <thead>
              <tr>
                <th>
                  <%= stat_icon(:accounts, size: 'sm') %>
                  Compte
                </th>
                <th>
                  <%= stat_icon(:balance, size: 'sm') %>
                  Balance
                </th>
                <th>
                  <%= stat_icon(:profit, size: 'sm') %>
                  Gains
                </th>
              </tr>
            </thead>
            <tbody>
              <% @mt5_accounts.each do |account| %>
                <tr>
                  <td><%= account.account_name %></td>
                  <td class="positive"><%= number_to_currency(account.balance, unit: "€", format: "%n %u") %></td>
                  <td class="<%= account.net_gains > 0 ? 'positive' : 'negative' %>">
                    <%= number_to_currency(account.net_gains, unit: "€", format: "%n %u") %>
                  </td>
                </tr>
              <% end %>
            </tbody>
          </table>
        <% else %>
          <p style="text-align: center; color: var(--text-muted); padding: 40px;">
            <%= stat_icon(:accounts, size: 'lg', color: 'muted') %>
            Aucun compte MT5
          </p>
        <% end %>
      </div>
      
      <div class="card">
        <h2>
          <%= stat_icon(:trades, size: 'lg') %>
          Activité Récente
        </h2>
        <% recent_trades = @client.trades.order(close_time: :desc).limit(5) %>
        <% if recent_trades.any? %>
          <table>
            <thead>
              <tr>
                <th>
                  <%= stat_icon(:monthly, size: 'sm') %>
                  Date
                </th>
                <th>
                  <%= stat_icon(:symbols, size: 'sm') %>
                  Symbole
                </th>
                <th>
                  <%= stat_icon(:profit, size: 'sm') %>
                  Profit
                </th>
              </tr>
            </thead>
            <tbody>
              <% recent_trades.each do |trade| %>
                <tr>
                  <td><%= trade.close_time&.strftime("%d/%m/%Y") || "Ouvert" %></td>
                  <td><%= trade.symbol %></td>
                  <td class="<%= trade.profit > 0 ? 'positive' : 'negative' %>">
                    <%= number_to_currency(trade.profit, unit: "€", format: "%n %u") %>
                  </td>
                </tr>
              <% end %>
            </tbody>
          </table>
        <% else %>
          <p style="text-align: center; color: var(--text-muted); padding: 40px;">
            <%= stat_icon(:trades, size: 'lg', color: 'muted') %>
            Aucune transaction récente
          </p>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script data-turbo-track="reload">
// Fonction pour charger Chart.js de manière asynchrone
function loadChartJS() {
  return new Promise((resolve, reject) => {
    if (typeof Chart !== 'undefined') {
      resolve(Chart);
      return;
    }
    
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js';
    script.onload = () => resolve(Chart);
    script.onerror = () => reject(new Error('Failed to load Chart.js'));
    document.head.appendChild(script);
  });
}

// Initialiser le graphique des bots
async function initializeBotsChart() {
  try {
    await loadChartJS();
    
    const ctx = document.getElementById('botsChart');
    if (!ctx) return;
    
    const loadingDiv = document.getElementById('bots-chart-loading');
    if (loadingDiv) {
      loadingDiv.style.display = 'none';
    }
    ctx.style.display = 'block';
    
    const isDarkMode = document.body.classList.contains('dark-mode');
    const textColor = isDarkMode ? '#e2e8f0' : '#1e293b';
    const gridColor = isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
    
    const botsData = <%= raw current_user.bot_purchases.includes(:trading_bot).map { |bp| 
      # Calculer le taux de réussite directement depuis les trades du user
      user_trades = Trade.joins(:mt5_account).where(mt5_accounts: { user_id: current_user.id })
                         .where(magic_number: bp.magic_number)
      winning_trades = user_trades.where("profit > 0").count
      total_trades = user_trades.count
      success_rate = total_trades > 0 ? (winning_trades.to_f / total_trades * 100).round(2) : 0
      
      {
        name: bp.trading_bot.name,
        profit: bp.total_profit || 0,
        trades: bp.trades_count || 0,
        success_rate: success_rate,
        magic_number: bp.magic_number
      }
    }.to_json %>;
    
    if (botsData.length === 0) {
      ctx.style.display = 'none';
      loadingDiv.innerHTML = '<div style="text-align: center; padding: 40px;"><i class="fa-icon fa-lg fa-robot" style="font-size: 3rem; opacity: 0.5; margin-bottom: 16px;"></i><h3>Aucun bot trouvé</h3><p>Vous n\'avez pas encore de bots assignés</p></div>';
      loadingDiv.style.display = 'flex';
      return;
    }
    
    const botNames = botsData.map(bot => bot.name);
    const profits = botsData.map(bot => bot.profit);
    const tradesCount = botsData.map(bot => bot.trades);
    
    const profitColors = profits.map(profit => 
      profit >= 0 ? 'rgba(34, 197, 94, 0.8)' : 'rgba(239, 68, 68, 0.8)'
    );
    
    const borderColors = profits.map(profit => 
      profit >= 0 ? 'rgba(34, 197, 94, 1)' : 'rgba(239, 68, 68, 1)'
    );
    
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: botNames,
        datasets: [
          {
            label: 'Profit Total (€)',
            data: profits,
            backgroundColor: profitColors,
            borderColor: borderColors,
            borderWidth: 2,
            borderRadius: 8,
            yAxisID: 'y-profit'
          },
          {
            label: 'Nombre de Trades',
            data: tradesCount,
            type: 'line',
            borderColor: 'rgba(59, 130, 246, 1)',
            backgroundColor: 'rgba(59, 130, 246, 0.1)',
            borderWidth: 3,
            pointBackgroundColor: 'rgba(59, 130, 246, 1)',
            pointBorderColor: '#fff',
            pointBorderWidth: 2,
            pointRadius: 6,
            yAxisID: 'y-trades'
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          title: {
            display: true,
            text: 'Performances des Bots',
            font: { size: 18, weight: 'bold' },
            color: textColor
          },
          legend: {
            display: true,
            position: 'top',
            labels: { color: textColor, font: { size: 12 } }
          },
          tooltip: {
            backgroundColor: isDarkMode ? 'rgba(0, 0, 0, 0.8)' : 'rgba(255, 255, 255, 0.9)',
            titleColor: textColor,
            bodyColor: textColor,
            borderColor: gridColor,
            borderWidth: 1,
            callbacks: {
              afterBody: function(context) {
                const index = context[0].dataIndex;
                const bot = botsData[index];
                return [
                  `Magic Number: ${bot.magic_number}`,
                  `Taux de réussite: ${bot.success_rate}%`
                ];
              }
            }
          }
        },
        scales: {
          x: {
            ticks: { color: textColor, font: { size: 11 } },
            grid: { color: gridColor }
          },
          'y-profit': {
            type: 'linear',
            display: true,
            position: 'left',
            title: { display: true, text: 'Profit (€)', color: textColor },
            ticks: { color: textColor, callback: function(value) { return value.toFixed(0) + '€'; } },
            grid: { color: gridColor }
          },
          'y-trades': {
            type: 'linear',
            display: true,
            position: 'right',
            title: { display: true, text: 'Nombre de Trades', color: textColor },
            ticks: { color: textColor },
            grid: { drawOnChartArea: false, color: gridColor }
          }
        },
        interaction: { intersect: false, mode: 'index' }
      }
    });
  } catch (error) {
    console.error('Error initializing bots chart:', error);
  }
}

// Initialiser le graphique des profits mensuels
async function initializeChart() {
  try {
    // Attendre que Chart.js soit chargé
    await loadChartJS();
    
    const ctx = document.getElementById('portfolioChart');
    if (!ctx) {
      console.warn('Canvas element not found');
      return;
    }
    
    // Détruire l'instance précédente si elle existe
    if (window.portfolioChartInstance) {
      window.portfolioChartInstance.destroy();
    }
    
    // Masquer le loader et afficher le canvas
    const loadingDiv = document.getElementById('chart-loading');
    if (loadingDiv) {
      loadingDiv.style.display = 'none';
    }
    ctx.style.display = 'block';
  
    const isDarkMode = document.body.classList.contains('dark-mode');
    const textColor = isDarkMode ? '#e2e8f0' : '#1e293b';
    const gridColor = isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
    
    const historicalData = <%= raw @monthly_profits.to_json %>;
    const projectionData = <%= raw @projection_data.to_json %>;
    const currentBalance = <%= current_user.mt5_accounts.sum(:balance) %>;
    
    const historicalLabels = historicalData.map(d => d.month);
    const projectionLabels = projectionData.map(d => d.month);
    const allLabels = [...historicalLabels, ...projectionLabels];
    
    const historicalProfits = historicalData.map(d => d.profit);
    
    const projectionProfits = new Array(historicalData.length).fill(null);
    projectionData.forEach((d, i) => {
      projectionProfits.push(d.balance);
    });
    
    projectionProfits[historicalData.length] = currentBalance;
    
    window.portfolioChartInstance = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: allLabels,
        datasets: [
          {
            type: 'bar',
            label: 'Profits Mensuels',
            data: [...historicalProfits, ...new Array(projectionData.length).fill(null)],
            backgroundColor: historicalProfits.map(p => p >= 0 ? 'rgba(34, 197, 94, 0.3)' : 'rgba(239, 68, 68, 0.3)'),
            borderColor: historicalProfits.map(p => p >= 0 ? 'rgba(34, 197, 94, 0.5)' : 'rgba(239, 68, 68, 0.5)'),
            borderWidth: 1,
            borderRadius: 8,
            yAxisID: 'y',
            order: 2
          },
          {
            type: 'line',
            label: 'Balance Projetée',
            data: projectionProfits,
            borderColor: '#3b82f6',
            backgroundColor: 'rgba(59, 130, 246, 0.1)',
            borderWidth: 4,
            borderDash: [10, 5],
            fill: false,
            tension: 0.4,
            pointRadius: 6,
            pointHoverRadius: 8,
            pointBackgroundColor: '#3b82f6',
            pointBorderColor: '#fff',
            pointBorderWidth: 3,
            yAxisID: 'y1',
            order: 1
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        interaction: {
          intersect: false,
          mode: 'index'
        },
        plugins: {
          legend: {
            display: true,
            position: 'top',
            labels: {
              color: textColor,
              font: {
                size: 14,
                weight: '600'
              },
              padding: 15,
              usePointStyle: true
            }
          },
          tooltip: {
            backgroundColor: isDarkMode ? 'rgba(30, 41, 59, 0.95)' : 'rgba(255, 255, 255, 0.95)',
            titleColor: textColor,
            bodyColor: textColor,
            borderColor: isDarkMode ? '#475569' : '#cbd5e1',
            borderWidth: 1,
            padding: 12,
            displayColors: true,
            callbacks: {
              label: function(context) {
                if (context.parsed.y === null) return '';
                let label = context.dataset.label || '';
                if (label) {
                  label += ': ';
                }
                const value = context.parsed.y;
                const formattedValue = Math.abs(value).toLocaleString('fr-FR', { 
                  minimumFractionDigits: 2, 
                  maximumFractionDigits: 2 
                }) + ' €';
                label += value >= 0 ? formattedValue : '-' + formattedValue;
                return label;
              }
            }
          }
        },
        scales: {
          x: {
            grid: {
              display: false
            },
            ticks: {
              color: textColor,
              font: {
                size: 11
              },
              maxRotation: 45,
              minRotation: 45
            }
          },
          y: {
            type: 'linear',
            position: 'left',
            beginAtZero: true,
            grid: {
              color: gridColor,
              drawBorder: false
            },
            ticks: {
              color: textColor,
              font: {
                size: 12
              },
              callback: function(value) {
                return value.toLocaleString('fr-FR', { maximumFractionDigits: 0 }) + ' €';
              }
            },
            title: {
              display: true,
              text: 'Profits Mensuels',
              color: textColor,
              font: {
                size: 12,
                weight: '600'
              }
            }
          },
          y1: {
            type: 'linear',
            position: 'right',
            grid: {
              display: false
            },
            ticks: {
              color: textColor,
              font: {
                size: 12
              },
              callback: function(value) {
                return value.toLocaleString('fr-FR', { maximumFractionDigits: 0 }) + ' €';
              }
            },
            title: {
              display: true,
              text: 'Balance Projetée',
              color: textColor,
              font: {
                size: 12,
                weight: '600'
              }
            }
          }
        }
      }
    });
  } catch (error) {
    console.error('Error initializing chart:', error);
  }
}

// Initialiser les graphiques
document.addEventListener('DOMContentLoaded', function() {
  initializeChart();
  initializeBotsChart();
});
document.addEventListener('turbo:load', function() {
  initializeChart();
  initializeBotsChart();
});
document.addEventListener('turbo:render', function() {
  initializeChart();
  initializeBotsChart();
});
</script>

<%= render 'admin/shared/campaign_popup' %>