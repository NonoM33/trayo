<style>
  .dashboard-welcome {
    margin-bottom: 2rem;
  }
  
  .dashboard-welcome h1 {
    font-size: 1.875rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    letter-spacing: -0.025em;
  }
  
  .dashboard-welcome p {
    font-size: 0.875rem;
    color: hsl(var(--muted-foreground));
    margin: 0;
  }
  
  .chart-container {
    position: relative;
    height: 400px;
    width: 100%;
  }
  
  @media (max-width: 1024px) {
    .chart-container {
      height: 350px;
    }
  }
  
  @media (max-width: 768px) {
    .dashboard-welcome h1 {
      font-size: 1.5rem;
    }
    
    .chart-container {
      height: 300px;
    }
    
    .info-box {
      padding: 1rem;
    }
    
    .info-box-title {
      font-size: 0.875rem;
    }
  }
  
  @media (max-width: 390px) {
    .dashboard-welcome {
      margin-bottom: 1.5rem;
    }
    
    .dashboard-welcome h1 {
      font-size: 1.375rem;
    }
    
    .dashboard-welcome p {
      font-size: 0.8125rem;
    }
    
    .chart-container {
      height: 250px;
    }
    
    .info-box {
      padding: 0.875rem;
    }
    
    .info-box p {
      font-size: 0.8125rem;
    }
  }
  
  @media (hover: none) and (pointer: coarse) {
    .chart-container {
      touch-action: pan-y;
    }
  }
</style>

<%= render 'admin/shared/sidebar' %>

<div class="main-content">
  <%= render 'admin/shared/navbar' %>
      
      <div class="container">
     
        <%= render 'admin/shared/campaign_banner' %>
        
        <div class="dashboard-welcome">
          <h1>
            Bienvenue, <%= @client.first_name || @client.email.split('@').first %>
          </h1>
          <p>
            Voici un aperÃ§u de vos performances de trading
          </p>
        </div>

        <div class="info-grid" style="margin-bottom: 1.5rem;">
          <div class="info-item">
            <div class="info-label">Balance Totale</div>
            <div class="info-value">
              <%= number_to_currency(@client.mt5_accounts.sum(:balance), unit: "â‚¬", format: "%n %u") %>
            </div>
          </div>
          
          <div class="info-item">
            <div class="info-label">Gains Totaux</div>
            <div class="info-value <%= @client.total_profits > 0 ? 'positive' : 'negative' %>">
              <%= number_to_currency(@client.total_profits, unit: "â‚¬", format: "%n %u") %>
            </div>
          </div>
          
          <div class="info-item">
            <div class="info-label">Commission Due</div>
            <div class="info-value">
              <%= number_to_currency(@client.total_commission_due, unit: "â‚¬", format: "%n %u") %>
            </div>
          </div>
          
          <div class="info-item">
            <div class="info-label">Solde Ã  Payer</div>
            <div class="info-value <%= @client.balance_due > 0 ? 'negative' : 'positive' %>">
              <%= number_to_currency(@client.balance_due, unit: "â‚¬", format: "%n %u") %>
            </div>
          </div>
        </div>
        
        <div class="card">
          <h2>Profits Mensuels & Projection</h2>
          
          <div class="two-col" style="margin-bottom: 24px;">
            <div class="info-box info-box-info">
              <div class="info-box-title">ðŸ“Š Performance Historique</div>
              <p style="margin: 0;">Vos profits rÃ©els des 12 derniers mois</p>
            </div>
            <div class="info-box info-box-success">
              <div class="info-box-title">ðŸŽ¯ Projection (6 mois)</div>
              <p style="margin: 0;">BasÃ©e sur votre moyenne mensuelle: <strong><%= number_to_currency((@projection_data.last[:balance] - current_user.mt5_accounts.sum(:balance)) / 6, unit: "â‚¬", format: "%n %u") %>/mois</strong></p>
            </div>
          </div>
          
          <div class="chart-container">
            <canvas id="portfolioChart"></canvas>
          </div>
        </div>
        
        <div class="two-col">
          <div class="card">
            <h2>Comptes MT5</h2>
            
            <% if @mt5_accounts.any? %>
              <table>
                <thead>
                  <tr>
                    <th>Compte</th>
                    <th>Balance</th>
                    <th>Gains</th>
                  </tr>
                </thead>
                <tbody>
                  <% @mt5_accounts.each do |account| %>
                    <tr>
                      <td><%= account.account_name %></td>
                      <td class="positive"><%= number_to_currency(account.balance, unit: "â‚¬", format: "%n %u") %></td>
                      <td class="<%= account.net_gains > 0 ? 'positive' : 'negative' %>">
                        <%= number_to_currency(account.net_gains, unit: "â‚¬", format: "%n %u") %>
                      </td>
                    </tr>
                  <% end %>
                </tbody>
              </table>
            <% else %>
              <p style="text-align: center; color: var(--text-muted); padding: 40px;">Aucun compte MT5</p>
            <% end %>
          </div>
          
          <div class="card">
            <h2>ActivitÃ© RÃ©cente</h2>
            
            <% recent_trades = @client.trades.order(close_time: :desc).limit(5) %>
            <% if recent_trades.any? %>
              <table>
                <thead>
                  <tr>
                    <th>Date</th>
                    <th>Symbole</th>
                    <th>Profit</th>
                  </tr>
                </thead>
                <tbody>
                  <% recent_trades.each do |trade| %>
                    <tr>
                      <td><%= trade.close_time&.strftime("%d/%m/%Y") || "Ouvert" %></td>
                      <td><%= trade.symbol %></td>
                      <td class="<%= trade.profit > 0 ? 'positive' : 'negative' %>">
                        <%= number_to_currency(trade.profit, unit: "â‚¬", format: "%n %u") %>
                      </td>
                    </tr>
                  <% end %>
                </tbody>
              </table>
            <% else %>
              <p style="text-align: center; color: var(--text-muted); padding: 40px;">Aucune transaction rÃ©cente</p>
            <% end %>
          </div>
        </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js" data-turbo-track="reload"></script>
  <script data-turbo-track="reload">
    function initializeChart() {
      const ctx = document.getElementById('portfolioChart');
      if (!ctx) return;
      
      if (window.portfolioChartInstance) {
        window.portfolioChartInstance.destroy();
      }
      
      const isDarkMode = document.body.classList.contains('dark-mode');
      const textColor = isDarkMode ? '#e2e8f0' : '#1e293b';
      const gridColor = isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
      
      const historicalData = <%= raw @monthly_profits.to_json %>;
      const projectionData = <%= raw @projection_data.to_json %>;
      const currentBalance = <%= current_user.mt5_accounts.sum(:balance) %>;
      
      const historicalLabels = historicalData.map(d => d.month);
      const projectionLabels = projectionData.map(d => d.month);
      const allLabels = [...historicalLabels, ...projectionLabels];
      
      const historicalProfits = historicalData.map(d => d.profit);
      
      const projectionProfits = new Array(historicalData.length).fill(null);
      projectionData.forEach((d, i) => {
        projectionProfits.push(d.balance);
      });
      
      projectionProfits[historicalData.length] = currentBalance;
      
      window.portfolioChartInstance = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: allLabels,
          datasets: [
            {
              type: 'bar',
              label: 'Profits Mensuels',
              data: [...historicalProfits, ...new Array(projectionData.length).fill(null)],
              backgroundColor: historicalProfits.map(p => p >= 0 ? 'rgba(34, 197, 94, 0.3)' : 'rgba(239, 68, 68, 0.3)'),
              borderColor: historicalProfits.map(p => p >= 0 ? 'rgba(34, 197, 94, 0.5)' : 'rgba(239, 68, 68, 0.5)'),
              borderWidth: 1,
              borderRadius: 8,
              yAxisID: 'y',
              order: 2
            },
            {
              type: 'line',
              label: 'Balance ProjetÃ©e',
              data: projectionProfits,
              borderColor: '#3b82f6',
              backgroundColor: 'rgba(59, 130, 246, 0.1)',
              borderWidth: 4,
              borderDash: [10, 5],
              fill: false,
              tension: 0.4,
              pointRadius: 6,
              pointHoverRadius: 8,
              pointBackgroundColor: '#3b82f6',
              pointBorderColor: '#fff',
              pointBorderWidth: 3,
              yAxisID: 'y1',
              order: 1
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          interaction: {
            intersect: false,
            mode: 'index'
          },
          plugins: {
            legend: {
              display: true,
              position: 'top',
              labels: {
                color: textColor,
                font: {
                  size: 14,
                  weight: '600'
                },
                padding: 15,
                usePointStyle: true
              }
            },
            tooltip: {
              backgroundColor: isDarkMode ? 'rgba(30, 41, 59, 0.95)' : 'rgba(255, 255, 255, 0.95)',
              titleColor: textColor,
              bodyColor: textColor,
              borderColor: isDarkMode ? '#475569' : '#cbd5e1',
              borderWidth: 1,
              padding: 12,
              displayColors: true,
              callbacks: {
                label: function(context) {
                  if (context.parsed.y === null) return '';
                  let label = context.dataset.label || '';
                  if (label) {
                    label += ': ';
                  }
                  const value = context.parsed.y;
                  const formattedValue = Math.abs(value).toLocaleString('fr-FR', { 
                    minimumFractionDigits: 2, 
                    maximumFractionDigits: 2 
                  }) + ' â‚¬';
                  label += value >= 0 ? formattedValue : '-' + formattedValue;
                  return label;
                }
              }
            }
          },
          scales: {
            x: {
              grid: {
                display: false
              },
              ticks: {
                color: textColor,
                font: {
                  size: 11
                },
                maxRotation: 45,
                minRotation: 45
              }
            },
            y: {
              type: 'linear',
              position: 'left',
              beginAtZero: true,
              grid: {
                color: gridColor,
                drawBorder: false
              },
              ticks: {
                color: textColor,
                font: {
                  size: 12
                },
                callback: function(value) {
                  return value.toLocaleString('fr-FR', { maximumFractionDigits: 0 }) + ' â‚¬';
                }
              },
              title: {
                display: true,
                text: 'Profits Mensuels',
                color: textColor,
                font: {
                  size: 12,
                  weight: '600'
                }
              }
            },
            y1: {
              type: 'linear',
              position: 'right',
              grid: {
                display: false
              },
              ticks: {
                color: textColor,
                font: {
                  size: 12
                },
                callback: function(value) {
                  return value.toLocaleString('fr-FR', { maximumFractionDigits: 0 }) + ' â‚¬';
                }
              },
              title: {
                display: true,
                text: 'Balance ProjetÃ©e',
                color: textColor,
                font: {
                  size: 12,
                  weight: '600'
                }
              }
            }
          }
        }
      });
    }
    
    document.addEventListener('DOMContentLoaded', initializeChart);
    document.addEventListener('turbo:load', initializeChart);
    document.addEventListener('turbo:render', initializeChart);
  </script>

