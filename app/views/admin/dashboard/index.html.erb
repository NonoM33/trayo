<%= render 'admin/shared/sidebar' %>

<div class="main-content">
  <%= render 'admin/shared/navbar' %>
  
  <div class="container">
    <%= render 'admin/shared/campaign_banner' %>
    
    <div class="dashboard-hero">
      <div class="hero-content">
        <h1 class="hero-title">Bienvenue, <%= @client.first_name || @client.email.split('@').first %></h1>
        <p class="hero-subtitle">Surveillez et analysez vos performances de trading en temps r√©el</p>
      </div>
      <div class="hero-actions">
        <%= link_to admin_shop_index_path, class: "hero-button" do %>
          <%= svg_tag "arrow-up-right", size: "16" %>
          <span>Explorer les bots</span>
        <% end %>
      </div>
    </div>
    
    <div class="monitoring-alert-widget">
      <% all_accounts = Mt5Account.all %>
      <% online_accounts = all_accounts.where("last_heartbeat_at > ?", 30.seconds.ago) %>
      <% offline_accounts = all_accounts.where("last_heartbeat_at <= ? OR last_heartbeat_at IS NULL", 30.seconds.ago) %>
      
      <div class="monitoring-status <%= offline_accounts.any? ? 'status-error' : 'status-ok' %>">
        <div class="monitoring-header">
          <div class="monitoring-icon">
            <% if offline_accounts.any? %>
              <%= svg_tag "alert-triangle", size: "24" %>
            <% else %>
              <%= svg_tag "check-circle", size: "24" %>
            <% end %>
          </div>
          <div>
            <h3>Monitoring des Comptes MT5</h3>
            <p><%= all_accounts.count %> comptes suivis</p>
          </div>
        </div>
        
        <div class="monitoring-metrics">
          <div class="metric-card">
            <div class="metric-icon metric-online">
              <%= svg_tag "activity", size: "20" %>
            </div>
            <div class="metric-content">
              <div class="metric-value"><%= online_accounts.count %></div>
              <div class="metric-label">En ligne</div>
            </div>
          </div>
          
          <div class="metric-card">
            <div class="metric-icon <%= offline_accounts.any? ? 'metric-offline' : 'metric-online' %>">
              <%= svg_tag "alert-circle", size: "20" %>
            </div>
            <div class="metric-content">
              <div class="metric-value <%= offline_accounts.any? ? 'value-negative' : 'value-positive' %>"><%= offline_accounts.count %></div>
              <div class="metric-label">Hors ligne</div>
            </div>
          </div>
        </div>
        
        <% if offline_accounts.any? %>
          <div class="offline-accounts-list">
            <h4>Comptes sans signal (30+ secondes):</h4>
            <ul>
              <% offline_accounts.each do |account| %>
                <li>
                  <span class="account-name"><%= account.account_name %></span>
                  <% if account.last_heartbeat_at %>
                    <span class="last-seen">
                      Vu il y a <%= time_ago_in_words(account.last_heartbeat_at) %>
                    </span>
                  <% else %>
                    <span class="last-seen never">Jamais synchronis√©</span>
                  <% end %>
                </li>
              <% end %>
            </ul>
          </div>
        <% end %>
      </div>
    </div>
    
    <div class="stats-grid">
      <div class="stat-card stat-card-accent">
        <div class="stat-icon">
          <%= svg_tag "wallet", size: "48" %>
        </div>
        <div class="stat-content">
          <div class="stat-label">Balance Totale</div>
          <div class="stat-value"><%= number_to_currency(@client.mt5_accounts.sum(:balance), unit: "‚Ç¨", format: "%n %u") %></div>
          <div class="stat-change">Tous comptes</div>
        </div>
      </div>
      
      <div class="stat-card stat-card-success">
        <div class="stat-icon">
          <%= svg_tag "trending-up", size: "24" %>
        </div>
        <div class="stat-content">
          <div class="stat-label">Gains Totaux</div>
          <div class="stat-value <%= @client.total_profits > 0 ? 'value-positive' : 'value-negative' %>">
            <%= number_to_currency(@client.total_profits, unit: "‚Ç¨", format: "%n %u") %>
          </div>
          <div class="stat-change">Performance globale</div>
        </div>
      </div>
      
      <div class="stat-card stat-card-info">
        <div class="stat-icon">
          <%= svg_tag "percent", size: "24" %>
        </div>
        <div class="stat-content">
          <div class="stat-label">Commission Due</div>
          <div class="stat-value"><%= number_to_currency(@client.total_commission_due, unit: "‚Ç¨", format: "%n %u") %></div>
          <div class="stat-change">√Ä payer</div>
        </div>
      </div>
      
      <div class="stat-card stat-card-warning">
        <div class="stat-icon">
          <%= svg_tag "alert-circle", size: "24" %>
        </div>
        <div class="stat-content">
          <div class="stat-label">Solde √† Payer</div>
          <div class="stat-value <%= @client.balance_due > 0 ? 'value-negative' : 'value-positive' %>">
            <%= number_to_currency(@client.balance_due, unit: "‚Ç¨", format: "%n %u") %>
          </div>
          <div class="stat-change">R√©gularisation</div>
        </div>
      </div>
    </div>
    
    <% if @bot_predictions&.any? %>
      <div class="section-card prediction-section">
        <div class="section-header">
          <h2 class="section-title">
            <%= svg_tag "layers", size: "20" %>
            Pr√©dictions Aujourd'hui
          </h2>
          <div class="section-badge">En temps r√©el</div>
        </div>
        
        <% bots_with_predictions = @bot_predictions.select { |prediction| prediction[:predictions]&.select { |pred| pred[:date] == Date.current }&.any? } %>
        <% if bots_with_predictions.any? %>
          <div class="bot-prediction-grid">
            <% bots_with_predictions.each do |prediction| %>
              <% today_predictions = prediction[:predictions]&.select { |pred| pred[:date] == Date.current } || [] %>
              <div class="bot-prediction-card">
                <div class="prediction-card-header">
                  <div class="prediction-bot-info">
                    <div class="prediction-bot-icon">ü§ñ</div>
                    <div>
                      <h3 class="prediction-bot-name"><%= prediction[:bot][:name] %></h3>
                      <span class="prediction-bot-meta">
                        <%= prediction[:total_trades] %> trades ‚Ä¢ <%= prediction[:success_rate] %>% succ√®s
                      </span>
                    </div>
                  </div>
                </div>
                
                <div class="prediction-content">
                  <h4 class="prediction-title">Pr√©dictions Aujourd'hui</h4>
                  <% if today_predictions.any? %>
                    <div class="prediction-items">
                      <% today_predictions.each do |pred| %>
                        <div class="prediction-item">
                          <div class="prediction-time"><%= pred[:hour] %>h</div>
                          <div class="prediction-progress">
                            <div class="prediction-progress-track">
                              <div class="prediction-progress-fill" style="width: <%= (pred[:probability] * 100).round %>%">
                                <div class="prediction-progress-glow"></div>
                              </div>
                            </div>
                          </div>
                          <div class="prediction-probability"><%= (pred[:probability] * 100).round %>%</div>
                        </div>
                      <% end %>
                    </div>
                  <% else %>
                    <div class="prediction-empty">
                      <%= svg_tag "calendar", size: "32" %>
                      <p>Aucune pr√©diction pour aujourd'hui</p>
                    </div>
                  <% end %>
                </div>
              </div>
            <% end %>
          </div>
        <% else %>
          <div class="empty-state">
            <%= svg_tag "robot", size: "64" %>
            <h3>Aucun bot actif aujourd'hui</h3>
            <p>Vos bots n'ont pas de pr√©dictions pour aujourd'hui. Ils se d√©clencheront peut-√™tre demain !</p>
          </div>
        <% end %>
      </div>
    <% end %>
    
    <div class="section-card">
      <div class="section-header">
        <h2 class="section-title">
          <%= svg_tag "bar-chart", size: "20" %>
          Performances des Bots
        </h2>
        <p class="section-subtitle">Analyse d√©taill√©e des performances de tous vos bots</p>
      </div>
      
      <div class="chart-container-apple">
        <div id="bots-chart-loading" class="chart-loader">
          <div class="loader-spinner"></div>
          <p>Chargement du graphique...</p>
        </div>
        <canvas id="botsChart"></canvas>
      </div>
    </div>
    
    <div class="section-card">
      <div class="section-header">
        <h2 class="section-title">
          <%= svg_tag "trending-up", size: "20" %>
          Profits Mensuels & Projection
        </h2>
        <p class="section-subtitle">Performance historique et projection future</p>
      </div>
      
      <div class="info-cards">
        <div class="info-card">
          <%= svg_tag "clock", size: "24" %>
          <div>
            <h3>Performance Historique</h3>
            <p>Vos profits r√©els des 12 derniers mois</p>
          </div>
        </div>
        <div class="info-card info-card-highlight">
          <%= svg_tag "target", size: "24" %>
          <div>
            <h3>Projection (6 mois)</h3>
            <p>Bas√©e sur votre moyenne mensuelle: <strong><%= number_to_currency((@projection_data&.last&.dig(:balance) || 0 - current_user.mt5_accounts.sum(:balance)) / 6, unit: "‚Ç¨", format: "%n %u") %>/mois</strong></p>
          </div>
        </div>
      </div>
      
      <div class="chart-container-apple">
        <div id="chart-loading" class="chart-loader">
          <div class="loader-spinner"></div>
          <p>Chargement du graphique...</p>
        </div>
        <canvas id="portfolioChart"></canvas>
      </div>
    </div>
    
    <div class="two-col-layout">
      <div class="section-card">
        <div class="section-header">
          <h2 class="section-title">
            <%= svg_tag "wallet", size: "20" %>
            Comptes MT5
          </h2>
        </div>
        
        <% if @mt5_accounts&.any? %>
          <div class="table-container">
            <table class="apple-table">
              <thead>
                <tr>
                  <th>Compte</th>
                  <th>Balance</th>
                  <th>Gains</th>
                </tr>
              </thead>
              <tbody>
                <% @mt5_accounts.each do |account| %>
                  <tr>
                    <td>
                      <div class="account-name">
                        <%= svg_tag "user", size: "16" %>
                        <span><%= account.account_name %></span>
                      </div>
                    </td>
                    <td class="<%= 'value-positive' %>">
                      <%= number_to_currency(account.balance, unit: "‚Ç¨", format: "%n %u") %>
                    </td>
                    <td class="<%= account.net_gains > 0 ? 'value-positive' : 'value-negative' %>">
                      <%= number_to_currency(account.net_gains, unit: "‚Ç¨", format: "%n %u") %>
                    </td>
                  </tr>
                <% end %>
              </tbody>
            </table>
          </div>
        <% else %>
          <div class="empty-state">
            <%= svg_tag "wallet", size: "64" %>
            <h3>Aucun compte MT5</h3>
            <p>Connectez vos comptes pour commencer</p>
          </div>
        <% end %>
      </div>
      
      <div class="section-card">
        <div class="section-header">
          <h2 class="section-title">
            <%= svg_tag "activity", size: "20" %>
            Activit√© R√©cente
          </h2>
        </div>
        
        <% recent_trades = @client.trades.order(close_time: :desc).limit(5) %>
        <% if recent_trades.any? %>
          <div class="table-container">
            <table class="apple-table">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Symbole</th>
                  <th>Profit</th>
                </tr>
              </thead>
              <tbody>
                <% recent_trades.each do |trade| %>
                  <tr>
                    <td><%= trade.close_time&.strftime("%d/%m/%Y") || "Ouvert" %></td>
                    <td><%= trade.symbol %></td>
                    <td class="<%= trade.profit > 0 ? 'value-positive' : 'value-negative' %>">
                      <%= number_to_currency(trade.profit, unit: "‚Ç¨", format: "%n %u") %>
                    </td>
                  </tr>
                <% end %>
              </tbody>
            </table>
          </div>
        <% else %>
          <div class="empty-state">
            <%= svg_tag "activity", size: "64" %>
            <h3>Aucune transaction r√©cente</h3>
            <p>Vos trades appara√Ætront ici</p>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<style>
.monitoring-alert-widget {
  margin-bottom: 32px;
  animation: fadeInDown 0.5s cubic-bezier(0.16, 1, 0.3, 1);
}

.monitoring-status {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.08) 0%, rgba(255, 255, 255, 0.04) 100%);
  backdrop-filter: blur(40px);
  border: 1px solid rgba(255, 255, 255, 0.15);
  border-radius: 20px;
  padding: 32px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
  position: relative;
  overflow: hidden;
}

.monitoring-status.status-ok {
  border-color: rgba(16, 185, 129, 0.5);
  background: linear-gradient(135deg, rgba(16, 185, 129, 0.05) 0%, rgba(5, 150, 105, 0.05) 100%);
}

.monitoring-status.status-error {
  border-color: rgba(239, 68, 68, 0.5);
  background: linear-gradient(135deg, rgba(239, 68, 68, 0.08) 0%, rgba(220, 38, 38, 0.05) 100%);
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% {
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
  }
  50% {
    box-shadow: 0 4px 24px rgba(239, 68, 68, 0.4);
  }
}

@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.monitoring-header {
  display: flex;
  align-items: center;
  gap: 16px;
  margin-bottom: 24px;
}

.monitoring-icon {
  width: 48px;
  height: 48px;
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, rgba(59, 130, 246, 0.2) 0%, rgba(139, 92, 246, 0.2) 100%);
}

.status-error .monitoring-icon {
  background: linear-gradient(135deg, rgba(239, 68, 68, 0.2) 0%, rgba(220, 38, 38, 0.2) 100%);
}

.status-ok .monitoring-icon {
  background: linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(5, 150, 105, 0.2) 100%);
}

.monitoring-header h3 {
  font-size: 20px;
  font-weight: 700;
  letter-spacing: -0.02em;
  margin: 0 0 4px 0;
}

.monitoring-header p {
  font-size: 14px;
  color: var(--text-secondary);
  margin: 0;
}

.monitoring-metrics {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 16px;
  margin-bottom: 24px;
}

.metric-card {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, rgba(255, 255, 255, 0.02) 100%);
  backdrop-filter: blur(30px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 16px;
  padding: 20px;
  display: flex;
  align-items: center;
  gap: 16px;
  box-shadow: inset 0 1px 2px rgba(255, 255, 255, 0.08);
}

.metric-icon {
  width: 40px;
  height: 40px;
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.metric-icon.metric-online {
  background: linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(5, 150, 105, 0.2) 100%);
}

.metric-icon.metric-offline {
  background: linear-gradient(135deg, rgba(239, 68, 68, 0.2) 0%, rgba(220, 38, 38, 0.2) 100%);
}

.metric-content {
  flex: 1;
}

.metric-value {
  font-size: 24px;
  font-weight: 700;
  line-height: 1;
  margin-bottom: 4px;
}

.metric-label {
  font-size: 13px;
  color: var(--text-secondary);
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.offline-accounts-list {
  padding: 20px;
  background: linear-gradient(135deg, rgba(239, 68, 68, 0.1) 0%, rgba(220, 38, 38, 0.05) 100%);
  backdrop-filter: blur(20px);
  border-radius: 16px;
  border: 1px solid rgba(239, 68, 68, 0.2);
}

.offline-accounts-list h4 {
  font-size: 14px;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  color: #ef4444;
  margin: 0 0 12px 0;
}

.offline-accounts-list ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.offline-accounts-list li {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 0;
  border-bottom: 1px solid rgba(239, 68, 68, 0.1);
}

.offline-accounts-list li:last-child {
  border-bottom: none;
}

.account-name {
  font-size: 15px;
  font-weight: 600;
  color: var(--text-primary);
}

.last-seen {
  font-size: 13px;
  color: var(--text-secondary);
  font-weight: 500;
}

.last-seen.never {
  color: #ef4444;
}

@media (max-width: 768px) {
  .monitoring-alert-widget {
    margin-bottom: 24px;
  }
  
  .monitoring-status {
    padding: 24px;
  }
  
  .monitoring-header h3 {
    font-size: 18px;
  }
  
  .monitoring-metrics {
    grid-template-columns: 1fr;
  }
  
  .offline-accounts-list li {
    flex-direction: column;
    align-items: flex-start;
    gap: 4px;
  }
}

.dashboard-hero {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 32px;
  padding: 40px 0;
  animation: fadeInUp 0.6s cubic-bezier(0.16, 1, 0.3, 1);
}

.hero-content h1 {
  font-size: 48px;
  font-weight: 700;
  letter-spacing: -0.02em;
  line-height: 1.1;
  margin: 0 0 12px 0;
}

.hero-subtitle {
  font-size: 18px;
  color: var(--text-secondary);
  margin: 0;
  font-weight: 500;
}

.hero-actions {
  display: flex;
  gap: 12px;
}

.hero-button {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  padding: 12px 24px;
  background: var(--color-accent);
  color: white;
  border-radius: 12px;
  text-decoration: none;
  font-weight: 600;
  font-size: 15px;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
}

.hero-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(59, 130, 246, 0.4);
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
  gap: 20px;
  margin-bottom: 32px;
}

.stat-card {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.08) 0%, rgba(255, 255, 255, 0.04) 100%);
  backdrop-filter: blur(40px);
  border: 1px solid rgba(255, 255, 255, 0.15);
  border-radius: 20px;
  padding: 28px;
  display: flex;
  align-items: flex-start;
  gap: 20px;
  transition: all 0.2s ease;
  position: relative;
  overflow: hidden;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
}

.stat-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  transform: scaleX(0);
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.stat-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
  border-color: rgba(255, 255, 255, 0.25);
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.12) 0%, rgba(255, 255, 255, 0.08) 100%);
}

.stat-card:hover::before {
  transform: scaleX(1);
}

.stat-icon {
  width: 48px;
  height: 48px;
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.stat-card-accent {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.08) 0%, rgba(118, 75, 162, 0.08) 100%);
}

.stat-card-accent .stat-icon {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  box-shadow: 0 8px 24px rgba(102, 126, 234, 0.35);
}

.stat-card-accent::before {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.stat-card-success {
  background: linear-gradient(135deg, rgba(16, 185, 129, 0.08) 0%, rgba(5, 150, 105, 0.08) 100%);
}

.stat-card-success .stat-icon {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  box-shadow: 0 8px 24px rgba(16, 185, 129, 0.35);
}

.stat-card-success::before {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
}

.stat-card-info {
  background: linear-gradient(135deg, rgba(59, 130, 246, 0.08) 0%, rgba(37, 99, 235, 0.08) 100%);
}

.stat-card-info .stat-icon {
  background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
  box-shadow: 0 8px 24px rgba(59, 130, 246, 0.35);
}

.stat-card-info::before {
  background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
}

.stat-card-warning {
  background: linear-gradient(135deg, rgba(245, 158, 11, 0.08) 0%, rgba(217, 119, 6, 0.08) 100%);
}

.stat-card-warning .stat-icon {
  background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
  box-shadow: 0 8px 24px rgba(245, 158, 11, 0.35);
}

.stat-card-warning::before {
  background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
}

.stat-icon {
  color: white;
}

.stat-content {
  flex: 1;
  min-width: 0;
}

.stat-label {
  font-size: 13px;
  font-weight: 600;
  color: var(--text-secondary);
  text-transform: uppercase;
  letter-spacing: 0.05em;
  margin-bottom: 8px;
}

.stat-value {
  font-size: 28px;
  font-weight: 700;
  letter-spacing: -0.02em;
  line-height: 1;
  margin-bottom: 4px;
}

.value-positive {
  color: #10b981;
}

.value-negative {
  color: #ef4444;
}

.stat-change {
  font-size: 14px;
  color: var(--text-muted);
  font-weight: 500;
}

.dashboard-filters {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.08) 0%, rgba(255, 255, 255, 0.04) 100%);
  backdrop-filter: blur(40px);
  border: 1px solid rgba(255, 255, 255, 0.15);
  border-radius: 20px;
  padding: 32px;
  margin-bottom: 24px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
}

.filter-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
  margin-bottom: 24px;
}

.filter-label {
  display: block;
  font-size: 13px;
  font-weight: 600;
  color: var(--text-secondary);
  margin-bottom: 8px;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.filter-select-apple {
  width: 100%;
  padding: 14px 18px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.06) 0%, rgba(255, 255, 255, 0.03) 100%);
  backdrop-filter: blur(30px);
  border: 1px solid rgba(255, 255, 255, 0.15);
  border-radius: 12px;
  color: var(--text-primary);
  font-size: 15px;
  font-weight: 600;
  transition: all 0.2s ease;
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg width='12' height='8' viewBox='0 0 12 8' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1 1L6 6L11 1' stroke='%23c0c0c0' stroke-width='2' stroke-linecap='round'/%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 12px center;
  box-shadow: inset 0 1px 3px rgba(255, 255, 255, 0.1);
}

.filter-select-apple:focus {
  outline: none;
  border-color: rgba(59, 130, 246, 0.5);
  box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.15), 0 8px 24px rgba(0, 0, 0, 0.4);
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.06) 100%);
}

.filter-actions {
  display: flex;
  gap: 12px;
}

.btn-apple {
  padding: 12px 24px;
  border-radius: 12px;
  font-weight: 600;
  font-size: 15px;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  border: none;
  cursor: pointer;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.btn-apple-primary {
  background: var(--color-accent);
  color: white;
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
}

.btn-apple-primary:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(59, 130, 246, 0.4);
}

.btn-apple-secondary {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.08) 0%, rgba(255, 255, 255, 0.04) 100%);
  backdrop-filter: blur(30px);
  color: var(--text-primary);
  border: 1px solid rgba(255, 255, 255, 0.15);
  box-shadow: inset 0 1px 3px rgba(255, 255, 255, 0.1), 0 2px 8px rgba(0, 0, 0, 0.3);
}

.btn-apple-secondary:hover {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.12) 0%, rgba(255, 255, 255, 0.08) 100%);
  border-color: rgba(255, 255, 255, 0.25);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
}

.section-card {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.08) 0%, rgba(255, 255, 255, 0.04) 100%);
  backdrop-filter: blur(40px);
  border: 1px solid rgba(255, 255, 255, 0.15);
  border-radius: 20px;
  padding: 36px;
  margin-bottom: 24px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
  position: relative;
  overflow: hidden;
}

.section-header {
  margin-bottom: 24px;
}

.section-title {
  font-size: 24px;
  font-weight: 700;
  letter-spacing: -0.02em;
  display: flex;
  align-items: center;
  gap: 12px;
  margin: 0 0 8px 0;
}

.section-subtitle {
  font-size: 15px;
  color: var(--text-secondary);
  margin: 0;
  font-weight: 500;
}

.section-badge {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  padding: 8px 16px;
  background: linear-gradient(135deg, rgba(59, 130, 246, 0.15) 0%, rgba(139, 92, 246, 0.15) 100%);
  backdrop-filter: blur(10px);
  color: #3b82f6;
  border: 1px solid rgba(59, 130, 246, 0.2);
  border-radius: 12px;
  font-size: 13px;
  font-weight: 700;
  margin-top: 8px;
  box-shadow: 0 2px 8px rgba(59, 130, 246, 0.1);
}

.bot-prediction-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
}

.bot-prediction-card {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.08) 0%, rgba(255, 255, 255, 0.04) 100%);
  backdrop-filter: blur(40px);
  border: 1px solid rgba(255, 255, 255, 0.15);
  border-radius: 18px;
  padding: 24px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
}

.prediction-card-header {
  margin-bottom: 16px;
}

.prediction-bot-info {
  display: flex;
  align-items: center;
  gap: 12px;
}

.prediction-bot-icon {
  font-size: 32px;
}

.prediction-bot-name {
  font-size: 16px;
  font-weight: 700;
  margin: 0 0 4px 0;
}

.prediction-bot-meta {
  font-size: 13px;
  color: var(--text-secondary);
  font-weight: 500;
}

.prediction-content h4 {
  font-size: 14px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  color: var(--text-secondary);
  margin: 0 0 12px 0;
}

.prediction-items {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.prediction-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px 16px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, rgba(255, 255, 255, 0.02) 100%);
  backdrop-filter: blur(30px);
  border-radius: 10px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: inset 0 1px 2px rgba(255, 255, 255, 0.08);
}

.prediction-time {
  font-size: 13px;
  font-weight: 600;
  color: var(--text-primary);
  min-width: 35px;
}

.prediction-progress {
  flex: 1;
  min-width: 0;
}

.prediction-progress-track {
  height: 10px;
  background: linear-gradient(135deg, rgba(0, 0, 0, 0.08) 0%, rgba(0, 0, 0, 0.04) 100%);
  backdrop-filter: blur(8px);
  border-radius: 6px;
  overflow: hidden;
  box-shadow: inset 0 2px 6px rgba(0, 0, 0, 0.08), inset 0 -2px 4px rgba(255, 255, 255, 0.2);
}

.prediction-progress-fill {
  height: 100%;
  background: linear-gradient(90deg, #ef4444 0%, #f59e0b 50%, #10b981 100%);
  border-radius: 6px;
  position: relative;
  box-shadow: 0 2px 12px rgba(16, 185, 129, 0.3), inset 0 1px 2px rgba(255, 255, 255, 0.2);
}

.prediction-probability {
  font-size: 13px;
  font-weight: 600;
  color: var(--text-secondary);
  min-width: 40px;
  text-align: right;
}

.prediction-empty {
  text-align: center;
  padding: 48px 24px;
  background: rgba(255, 255, 255, 0.3);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  border: 1px dashed rgba(0, 0, 0, 0.1);
  color: var(--text-muted);
}

.prediction-empty svg {
  opacity: 0.3;
  margin-bottom: 16px;
}

.prediction-empty p {
  margin: 0;
  font-size: 14px;
}

.chart-container-apple {
  position: relative;
  height: 400px;
  width: 100%;
}

.chart-loader {
  position: absolute;
  inset: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: var(--text-muted);
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.06) 0%, rgba(255, 255, 255, 0.03) 100%);
  backdrop-filter: blur(40px);
  border-radius: 16px;
  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.3);
}

.chart-loader p {
  margin-top: 16px;
  font-size: 14px;
}

.loader-spinner {
  width: 56px;
  height: 56px;
  border: 4px solid rgba(59, 130, 246, 0.2);
  border-top-color: #3b82f6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  box-shadow: 0 4px 16px rgba(59, 130, 246, 0.3);
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

#botsChart, #portfolioChart {
  display: none;
}

.info-cards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 16px;
  margin-bottom: 32px;
}

.info-card {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.08) 0%, rgba(255, 255, 255, 0.04) 100%);
  backdrop-filter: blur(40px);
  border: 1px solid rgba(255, 255, 255, 0.15);
  border-radius: 18px;
  padding: 24px;
  display: flex;
  align-items: flex-start;
  gap: 20px;
  transition: all 0.2s ease;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
}

.info-card:hover {
  transform: translateY(-4px);
  border-color: rgba(255, 255, 255, 0.25);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.12) 0%, rgba(255, 255, 255, 0.08) 100%);
}

.info-card-highlight {
  background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(139, 92, 246, 0.1));
  border-color: rgba(59, 130, 246, 0.3);
}

.info-card h3 {
  font-size: 15px;
  font-weight: 700;
  margin: 0 0 4px 0;
}

.info-card p {
  font-size: 14px;
  color: var(--text-secondary);
  margin: 0;
  line-height: 1.5;
}

.two-col-layout {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 24px;
}

.table-container {
  overflow-x: auto;
  padding: 12px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.06) 0%, rgba(255, 255, 255, 0.03) 100%);
  backdrop-filter: blur(40px);
  border-radius: 16px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.3);
}

.apple-table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
}

.apple-table thead tr {
  border-bottom: 2px solid rgba(0, 0, 0, 0.08);
}

.apple-table th {
  text-align: left;
  padding: 16px 16px;
  font-size: 13px;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  color: var(--text-secondary);
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, rgba(255, 255, 255, 0.03) 100%);
  backdrop-filter: blur(20px);
  box-shadow: inset 0 1px 2px rgba(255, 255, 255, 0.08);
}

.apple-table td {
  padding: 20px 16px;
  font-size: 15px;
  font-weight: 500;
  border-bottom: 1px solid rgba(255, 255, 255, 0.05);
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.04) 0%, rgba(255, 255, 255, 0.02) 100%);
  backdrop-filter: blur(20px);
  box-shadow: inset 0 1px 2px rgba(255, 255, 255, 0.05);
}

.apple-table tbody tr:hover td {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.08) 0%, rgba(255, 255, 255, 0.05) 100%);
  box-shadow: inset 0 1px 3px rgba(255, 255, 255, 0.15), 0 2px 8px rgba(0, 0, 0, 0.3);
}

.account-name {
  display: flex;
  align-items: center;
  gap: 8px;
  font-weight: 600;
}

.empty-state {
  text-align: center;
  padding: 60px 32px;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.08) 0%, rgba(255, 255, 255, 0.04) 100%);
  backdrop-filter: blur(40px);
  border-radius: 18px;
  border: 2px dashed rgba(255, 255, 255, 0.15);
  color: var(--text-muted);
}

.empty-state svg {
  opacity: 0.3;
  margin-bottom: 16px;
}

.empty-state h3 {
  font-size: 18px;
  font-weight: 700;
  margin: 0 0 8px 0;
  color: var(--text-primary);
}

.empty-state p {
  font-size: 14px;
  margin: 0;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@media (max-width: 1024px) {
  .dashboard-hero {
    flex-direction: column;
    align-items: flex-start;
    gap: 24px;
    padding: 32px 0;
  }
  
  .hero-content h1 {
    font-size: 36px;
  }
  
  .stats-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .bot-prediction-grid {
    grid-template-columns: 1fr;
  }
  
  .two-col-layout {
    grid-template-columns: 1fr;
  }
}

@media (max-width: 768px) {
  .dashboard-hero {
    padding: 24px 0;
  }
  
  .hero-content h1 {
    font-size: 28px;
  }
  
  .hero-subtitle {
    font-size: 16px;
  }
  
  .stats-grid {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  
  .stat-card {
    padding: 20px;
  }
  
  .stat-value {
    font-size: 24px;
  }
  
  .dashboard-filters {
    padding: 24px;
  }
  
  .filter-grid {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  
  .filter-actions {
    flex-direction: column;
  }
  
  .btn-apple {
    width: 100%;
  }
  
  .section-card {
    padding: 24px;
  }
  
  .section-title {
    font-size: 20px;
  }
  
  .chart-container-apple {
    height: 300px;
  }
}

@media (max-width: 480px) {
  .dashboard-hero {
    padding: 20px 0;
  }
  
  .hero-content h1 {
    font-size: 24px;
  }
  
  .hero-button {
    width: 100%;
    justify-content: center;
  }
  
  .stat-card {
    flex-direction: column;
    gap: 12px;
  }
  
  .stat-icon {
    width: 40px;
    height: 40px;
  }
  
  .dashboard-filters {
    padding: 20px;
  }
  
  .section-card {
    padding: 20px;
  }
  
  .chart-container-apple {
    height: 250px;
  }
}
</style>

<script data-turbo-track="reload">
function loadChartJS() {
  return new Promise((resolve, reject) => {
    if (typeof Chart !== 'undefined') {
      resolve(Chart);
      return;
    }
    
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js';
    script.onload = () => resolve(Chart);
    script.onerror = () => reject(new Error('Failed to load Chart.js'));
    document.head.appendChild(script);
  });
}

async function initializeBotsChart() {
  try {
    await loadChartJS();
    
    const ctx = document.getElementById('botsChart');
    if (!ctx) return;
    
    const loadingDiv = document.getElementById('bots-chart-loading');
    const isDarkMode = document.body.classList.contains('dark-mode');
    
    const botsData = <%= raw current_user.bot_purchases.includes(:trading_bot).map { |bp| 
      user_trades = Trade.joins(:mt5_account).where(mt5_accounts: { user_id: current_user.id })
                         .where(magic_number: bp.magic_number)
      winning_trades = user_trades.where("profit > 0").count
      total_trades = user_trades.count
      success_rate = total_trades > 0 ? (winning_trades.to_f / total_trades * 100).round(2) : 0
      
      {
        name: bp.trading_bot.name,
        profit: bp.total_profit || 0,
        trades: bp.trades_count || 0,
        success_rate: success_rate,
        magic_number: bp.magic_number
      }
    }.to_json %>;
    
    if (botsData.length === 0) {
      loadingDiv.innerHTML = '<div class="empty-state"><svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z" fill="currentColor"/></svg><h3>Aucun bot trouv√©</h3><p>Vous n\'avez pas encore de bots assign√©s</p></div>';
      loadingDiv.style.display = 'flex';
      return;
    }
    
    if (loadingDiv) loadingDiv.style.display = 'none';
    ctx.style.display = 'block';
    
    const textColor = isDarkMode ? '#e2e8f0' : '#1e293b';
    const gridColor = isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
    const botNames = botsData.map(bot => bot.name);
    const profits = botsData.map(bot => bot.profit);
    const tradesCount = botsData.map(bot => bot.trades);
    
    const profitColors = profits.map(profit => profit >= 0 ? 'rgba(34, 197, 94, 0.8)' : 'rgba(239, 68, 68, 0.8)');
    const borderColors = profits.map(profit => profit >= 0 ? 'rgba(34, 197, 94, 1)' : 'rgba(239, 68, 68, 1)');
    
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: botNames,
        datasets: [
          {
            label: 'Profit Total (‚Ç¨)',
            data: profits,
            backgroundColor: profitColors,
            borderColor: borderColors,
            borderWidth: 2,
            borderRadius: 8,
            yAxisID: 'y-profit'
          },
          {
            label: 'Nombre de Trades',
            data: tradesCount,
            type: 'line',
            borderColor: '#3b82f6',
            backgroundColor: 'rgba(59, 130, 246, 0.1)',
            borderWidth: 3,
            pointBackgroundColor: '#3b82f6',
            pointBorderColor: '#fff',
            pointBorderWidth: 2,
            pointRadius: 6,
            yAxisID: 'y-trades'
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          title: {
            display: false
          },
          legend: {
            display: true,
            position: 'top',
            labels: { color: textColor, font: { size: 12 } }
          },
          tooltip: {
            backgroundColor: isDarkMode ? 'rgba(0, 0, 0, 0.8)' : 'rgba(255, 255, 255, 0.9)',
            titleColor: textColor,
            bodyColor: textColor,
            borderColor: gridColor,
            borderWidth: 1,
            callbacks: {
              afterBody: function(context) {
                const index = context[0].dataIndex;
                const bot = botsData[index];
                return [
                  `Magic Number: ${bot.magic_number}`,
                  `Taux de r√©ussite: ${bot.success_rate}%`
                ];
              }
            }
          }
        },
        scales: {
          x: {
            ticks: { color: textColor, font: { size: 11 } },
            grid: { color: gridColor }
          },
          'y-profit': {
            type: 'linear',
            display: true,
            position: 'left',
            title: { display: true, text: 'Profit (‚Ç¨)', color: textColor },
            ticks: { color: textColor, callback: function(value) { return value.toFixed(0) + '‚Ç¨'; } },
            grid: { color: gridColor }
          },
          'y-trades': {
            type: 'linear',
            display: true,
            position: 'right',
            title: { display: true, text: 'Nombre de Trades', color: textColor },
            ticks: { color: textColor },
            grid: { drawOnChartArea: false, color: gridColor }
          }
        },
        interaction: { intersect: false, mode: 'index' }
      }
    });
  } catch (error) {
    console.error('Error initializing bots chart:', error);
  }
}

async function initializeChart() {
  try {
    await loadChartJS();
    
    const ctx = document.getElementById('portfolioChart');
    if (!ctx) return;
    
    if (window.portfolioChartInstance) {
      window.portfolioChartInstance.destroy();
    }
    
    const loadingDiv = document.getElementById('chart-loading');
    if (loadingDiv) loadingDiv.style.display = 'none';
    ctx.style.display = 'block';
  
    const isDarkMode = document.body.classList.contains('dark-mode');
    const textColor = isDarkMode ? '#e2e8f0' : '#1e293b';
    const gridColor = isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
    
    const historicalData = <%= raw @monthly_profits.to_json %>;
    const projectionData = <%= raw @projection_data.to_json %>;
    const currentBalance = <%= current_user.mt5_accounts.sum(:balance) %>;
    
    const historicalLabels = historicalData.map(d => d.month);
    const projectionLabels = projectionData.map(d => d.month);
    const allLabels = [...historicalLabels, ...projectionLabels];
    
    const historicalProfits = historicalData.map(d => d.profit);
    const projectionProfits = new Array(historicalData.length).fill(null);
    projectionData.forEach((d, i) => {
      projectionProfits.push(d.balance);
    });
    
    projectionProfits[historicalData.length] = currentBalance;
    
    window.portfolioChartInstance = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: allLabels,
        datasets: [
          {
            type: 'bar',
            label: 'Profits Mensuels',
            data: [...historicalProfits, ...new Array(projectionData.length).fill(null)],
            backgroundColor: historicalProfits.map(p => p >= 0 ? 'rgba(34, 197, 94, 0.3)' : 'rgba(239, 68, 68, 0.3)'),
            borderColor: historicalProfits.map(p => p >= 0 ? 'rgba(34, 197, 94, 0.5)' : 'rgba(239, 68, 68, 0.5)'),
            borderWidth: 1,
            borderRadius: 8,
            yAxisID: 'y',
            order: 2
          },
          {
            type: 'line',
            label: 'Balance Projet√©e',
            data: projectionProfits,
            borderColor: '#3b82f6',
            backgroundColor: 'rgba(59, 130, 246, 0.1)',
            borderWidth: 4,
            borderDash: [10, 5],
            fill: false,
            tension: 0.4,
            pointRadius: 6,
            pointHoverRadius: 8,
            pointBackgroundColor: '#3b82f6',
            pointBorderColor: '#fff',
            pointBorderWidth: 3,
            yAxisID: 'y1',
            order: 1
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        interaction: {
          intersect: false,
          mode: 'index'
        },
        plugins: {
          legend: {
            display: true,
            position: 'top',
            labels: {
              color: textColor,
              font: {
                size: 14,
                weight: '600'
              },
              padding: 15,
              usePointStyle: true
            }
          },
          tooltip: {
            backgroundColor: isDarkMode ? 'rgba(30, 41, 59, 0.95)' : 'rgba(255, 255, 255, 0.95)',
            titleColor: textColor,
            bodyColor: textColor,
            borderColor: isDarkMode ? '#475569' : '#cbd5e1',
            borderWidth: 1,
            padding: 12,
            displayColors: true,
            callbacks: {
              label: function(context) {
                if (context.parsed.y === null) return '';
                let label = context.dataset.label || '';
                if (label) {
                  label += ': ';
                }
                const value = context.parsed.y;
                const formattedValue = Math.abs(value).toLocaleString('fr-FR', { 
                  minimumFractionDigits: 2, 
                  maximumFractionDigits: 2 
                }) + ' ‚Ç¨';
                label += value >= 0 ? formattedValue : '-' + formattedValue;
                return label;
              }
            }
          }
        },
        scales: {
          x: {
            grid: {
              display: false
            },
            ticks: {
              color: textColor,
              font: {
                size: 11
              },
              maxRotation: 45,
              minRotation: 45
            }
          },
          y: {
            type: 'linear',
            position: 'left',
            beginAtZero: true,
            grid: {
              color: gridColor,
              drawBorder: false
            },
            ticks: {
              color: textColor,
              font: {
                size: 12
              },
              callback: function(value) {
                return value.toLocaleString('fr-FR', { maximumFractionDigits: 0 }) + ' ‚Ç¨';
              }
            },
            title: {
              display: true,
              text: 'Profits Mensuels',
              color: textColor,
              font: {
                size: 12,
                weight: '600'
              }
            }
          },
          y1: {
            type: 'linear',
            position: 'right',
            grid: {
              display: false
            },
            ticks: {
              color: textColor,
              font: {
                size: 12
              },
              callback: function(value) {
                return value.toLocaleString('fr-FR', { maximumFractionDigits: 0 }) + ' ‚Ç¨';
              }
            },
            title: {
              display: true,
              text: 'Balance Projet√©e',
              color: textColor,
              font: {
                size: 12,
                weight: '600'
              }
            }
          }
        }
      }
    });
  } catch (error) {
    console.error('Error initializing chart:', error);
  }
}

document.addEventListener('DOMContentLoaded', function() {
  initializeChart();
  initializeBotsChart();
});
document.addEventListener('turbo:load', function() {
  initializeChart();
  initializeBotsChart();
});
document.addEventListener('turbo:render', function() {
  initializeChart();
  initializeBotsChart();
});

function refreshMonitoringWidget() {
  const widget = document.querySelector('.monitoring-alert-widget');
  if (!widget) return;
  
  fetch('/admin/dashboard/monitoring_status', {
    headers: {
      'Accept': 'application/json'
    }
  })
  .then(response => response.json())
  .then(data => {
    updateMonitoringWidget(data);
  })
  .catch(error => {
    console.error('Error refreshing monitoring widget:', error);
  });
}

function updateMonitoringWidget(data) {
  const statusDiv = document.querySelector('.monitoring-status');
  if (!statusDiv) return;
  
  statusDiv.className = data.offline_count > 0 ? 'monitoring-status status-error' : 'monitoring-status status-ok';
  
  const icon = document.querySelector('.monitoring-icon svg');
  if (icon) {
    icon.setAttribute('data-icon', data.offline_count > 0 ? 'alert-triangle' : 'check-circle');
  }
  
  const onlineCount = document.querySelector('.metric-card:first-child .metric-value');
  if (onlineCount) onlineCount.textContent = data.online_count;
  
  const offlineCount = document.querySelector('.metric-card:last-child .metric-value');
  if (offlineCount) {
    offlineCount.textContent = data.offline_count;
    offlineCount.className = data.offline_count > 0 ? 'metric-value value-negative' : 'metric-value value-positive';
  }
  
  const accountsList = document.querySelector('.offline-accounts-list');
  if (data.offline_accounts.length > 0) {
    if (!accountsList) {
      const widget = document.querySelector('.monitoring-status');
      const listHtml = `
        <div class="offline-accounts-list">
          <h4>Comptes sans signal (30+ secondes):</h4>
          <ul>
            ${data.offline_accounts.map(acc => `
              <li>
                <span class="account-name">${acc.account_name}</span>
                ${acc.last_heartbeat_at 
                  ? `<span class="last-seen">Vu il y a ${acc.time_ago}</span>`
                  : '<span class="last-seen never">Jamais synchronis√©</span>'
                }
              </li>
            `).join('')}
          </ul>
        </div>
      `;
      widget.insertAdjacentHTML('beforeend', listHtml);
    } else {
      accountsList.innerHTML = `
        <h4>Comptes sans signal (30+ secondes):</h4>
        <ul>
          ${data.offline_accounts.map(acc => `
            <li>
              <span class="account-name">${acc.account_name}</span>
              ${acc.last_heartbeat_at 
                ? `<span class="last-seen">Vu il y a ${acc.time_ago}</span>`
                : '<span class="last-seen never">Jamais synchronis√©</span>'
              }
            </li>
          `).join('')}
        </ul>
      `;
    }
  } else if (accountsList) {
    accountsList.remove();
  }
}

setInterval(refreshMonitoringWidget, 10000);
</script>

<%= render 'admin/shared/campaign_popup' %>